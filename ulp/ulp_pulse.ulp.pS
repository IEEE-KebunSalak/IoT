       
       
       
  .bss
  .global pulse_edge
pulse_edge:
  .long 0
  .global next_edge
next_edge:
  .long 0
  .global debounce_counter
debounce_counter:
  .long 0
  .global debounce_max_count
debounce_max_count:
  .long 0
  .global pulse_res
pulse_res:
  .long 0
  .global pulse_cur
pulse_cur:
  .long 0
  .global pulse_min
pulse_min:
  .long 0
  .global edge_count
edge_count:
  .long 0
  .global io_number
io_number:
  .long 0
  .text
  .global entry
entry:
  jump pulse_tick
  .global read_now
read_now:
  move r3, io_number
  ld r3, r3, 0
  move r0, r3
  jumpr read_io_high, 16, ge
  REG_RD ((((0x3ff48400 + 0x24)) - 0x3ff48000) / 4), ((14) + (16) - 1), (14)
  rsh r0, r0, r3
  jump read_done
read_io_high:
  REG_RD ((((0x3ff48400 + 0x24)) - 0x3ff48000) / 4), ((14 + 16) + (2) - 1), (14 + 16)
  sub r3, r3, 16
  rsh r0, r0, r3
read_done:
  and r0, r0, 1
  move r3, next_edge
  ld r3, r3, 0
  add r3, r0, r3
  and r3, r3, 1
  jump changed, eq
  move r3, debounce_max_count
  move r2, debounce_counter
  ld r3, r3, 0
  st r3, r2, 0
  halt
  .global changed
changed:
  move r3, debounce_counter
  ld r2, r3, 0
  add r2, r2, 0
  jump edge_detected, eq
  sub r2, r2, 1
  st r2, r3, 0
  halt
  .global edge_detected
edge_detected:
  move r3, debounce_max_count
  move r2, debounce_counter
  ld r3, r3, 0
  st r3, r2, 0
  move r3, next_edge
  ld r2, r3, 0
  add r2, r2, 1
  and r2, r2, 1
  st r2, r3, 0
  move r3, edge_count
  ld r2, r3, 0
  add r2, r2, 1
  st r2, r3, 0
  move r3, pulse_edge
  ld r3, r3, 0
  add r3, r0, r3
  and r3, r3, 1
  jump pulse_detected, eq
  halt
  .global pulse_tick
pulse_tick:
  move r3, pulse_cur
  ld r2, r3, 0
  add r2, r2, 1
  st r2, r3, 0
  jump read_now
  .global pulse_detected
pulse_detected:
  move r3, pulse_min
  move r2, pulse_cur
  ld r3, r3, 0
  ld r2, r2, 0
  sub r3, r2, r3
  jump pulse_lower, ov
  move r3, pulse_min
  ld r2, r3, 0
  add r2, r2, 0
  jump pulse_lower, eq
  jump pulse_reset
  .global pulse_lower
pulse_lower:
  move r3, pulse_cur
  move r2, pulse_min
  ld r3, r3, 0
  st r3, r2, 0
  jump pulse_reset
  .global pulse_reset
pulse_reset:
  move r3, pulse_res
  move r2, pulse_cur
  ld r3, r3, 0
  st r3, r2, 0
  halt
